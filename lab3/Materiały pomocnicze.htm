<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1250">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Segoe UI";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Trebuchet MS";
	panose-1:2 11 6 3 2 2 2 2 2 4;}
@font-face
	{font-family:inherit;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:0cm;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-right:0cm;
	margin-left:0cm;
	font-size:18.0pt;
	font-family:"Times New Roman",serif;
	font-weight:bold;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-right:0cm;
	margin-left:0cm;
	font-size:13.5pt;
	font-family:"Times New Roman",serif;
	font-weight:bold;}
p
	{margin-right:0cm;
	margin-left:0cm;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
code
	{font-family:"Courier New";}
pre
	{mso-style-link:"HTML Preformatted Char";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Times New Roman",serif;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Times New Roman",serif;
	font-weight:bold;}
span.HTMLPreformattedChar
	{mso-style-name:"HTML Preformatted Char";
	mso-style-link:"HTML Preformatted";
	font-family:"Courier New";}
.MsoChpDefault
	{font-family:"Calibri",sans-serif;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:107%;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:70.85pt 70.85pt 70.85pt 70.85pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=EN-US>

<div class=WordSection1>

<p class=MsoNormal style='line-height:normal;background:white'><span lang=PL
style='font-size:18.0pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Procesy
- materia³y pomocnicze</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><b><span
lang=PL style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Proces</span></b><span
lang=PL style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>&nbsp;jest
pojedyncz¹ instancj¹ wykonuj¹cego siê programu. </span><span style='font-size:
11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Mo¿emy w nim wyró¿niæ:</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>segment kodu</span></b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>&nbsp;- zawiera
     kod binarny aktualnie wykonywanego programu. Znajduje siê w nim kod
     zaimplementowanych przez nas funkcji oraz funkcji do³¹czanych z bibliotek.
     Zapisane w tym segmencie adresy funkcji pozwalaj¹ na ich lokalizacjê.</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>segment danych</span></b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>&nbsp;- zawiera
     zainicjalizowane zmienne globalne zdefiniowane w programie. Adres segmentu
     danych mo¿na ustaliæ na podstawie adresu zmiennej globalnej.</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>segment BSS
     -&nbsp;<i>Block Started by Symbol</i></span></b><span style='font-size:
     11.5pt;font-family:"Segoe UI",sans-serif'>&nbsp;- zawiera
     niezainicjalizowane zmienne globalne</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>segment stosu</span></b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>&nbsp;- zmienne
     lokalne oraz adresy powrotu wykorzystywane podczas powrotu z wykonywanej
     funkcji. Poniewa¿ proces moze pracowaæ w trybie u¿ytkownika lub trybie
     j¹dra, ka¿dy z tych trybów ma do dyspozycji oddzielny stos.</span></li>
</ul>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Ka¿demu
procesowi przydzielane s¹ zasoby czas procesora, pamiêæ, dostêp do urz¹deñ
we/wy oraz plików etc). Czêœæ tych zasobów jest do wy³¹cznej dyspozycji
procesu, zaœ czêœæ jest wspó³dzielona z innymi procesami.</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Na
proces nak³adane s¹ pewne ograniczenia dotycz¹ce zasobów systemowych,&nbsp;<br>
mo¿emy do nich uzyskaæ dostêp nastêpuj¹cymi funkcjami z&nbsp;</span><b><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>sys/resource.h:</span></b></p>

<p class=MsoNormal style='line-height:normal;background:white'><b><span
style='font-size:11.5pt;font-family:"Trebuchet MS",sans-serif;color:red'>int
getrlimit (int resource, struct rlimit *rlptr) Resource to jedno z makr
okreœlaj¹ce rodzaj zasobu</span></b></p>

<p class=MsoNormal style='line-height:normal;background:white'><b><span
style='font-size:11.5pt;font-family:"Trebuchet MS",sans-serif;color:red'>int
setrlimit (int resource, const struct rlimit *rlptr)</span></b></p>

<p class=MsoNormal style='line-height:normal;background:white'><b><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>struct
rlimit {</span></b></p>

<p class=MsoNormal style='line-height:normal;background:white'><b><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rlim_t rlim_cur; //bie¿¹ce ograniczenie</span></b></p>

<p class=MsoNormal style='line-height:normal;background:white'><b><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rlim_t rlim_max; //maksymalne ograniczenie</span></b></p>

<p class=MsoNormal style='line-height:normal;background:white'><b><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>}</span></b></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>&nbsp;<b>Identyfikatory
procesów</b></span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Ka¿dy
proces w systemie UNIX ma przypisany unikalny identyfikator -&nbsp;<b>PID</b>.
Jest to 16-bitowa, nieujemna liczba ca³kowita przypisywana do ka¿dego procesu
podczas jego tworzenia. Niektóre identyfikatory s¹ odgórnie zarezerwowane dla
specjalnych procesów w systemie, (swapper – 0,&nbsp;<i>init -1 etc)</i>.</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>System
UNIX pamiêta tak¿e identyfikator procesu macierzystego - ta informacja jest
zapisywana jako&nbsp;<b>PPID</b>&nbsp;(Parent PID).</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>&nbsp;Do
ka¿dego procesu przypisane s¹ równie¿ (rzeczywiste) identyfikatory u¿ytkownika
(<b>UID</b>) oraz grupy (<b>GID</b>), okreœlaj¹ce kto dany proces utworzy³.
Istniej¹ równie¿ efektywne UID i GID przechowuj¹ce informacje o identyfikatorze
w³aœciciela oraz grupy w³aœciciela programu.</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Do
pobrania informacji o identyfikatorach procesu mo¿emy pos³u¿yæ siê funkcjami z
biblioteki unistd.h, takimi jak:</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>pid_t
     getpid(void) - zwraca PID procesu wywo³uj¹cego funkcjê</span></b></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>pid_t
     getppid(void) - zwraca PID procesu macierzystego</span></b></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>uid_t
     getuid(void) - zwraca rzeczywisty identyfikator u¿ytkownika UID</span></b></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>uid_t
     geteuid(void) - zwraca efektywny identyfikator u¿ytkownika UID</span></b></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>gid_t
     getgid(void) - zwraca rzeczywisty identyfikator grupy GID</span></b></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>gid_t
     getegid(void) - zwraca efektywny identyfikator grupy GID</span></b></li>
</ul>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Definicje
niezbêdnych typów znajdziemy w&nbsp;</span><b><span style='font-size:11.5pt;
font-family:"Segoe UI",sans-serif;color:red'>sys/types.h.</span></b></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:18.0pt;font-family:"inherit",serif;color:#373A3C'>Tworzenie
procesów</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>W
systemie Unix ka¿dy proces, za wyj¹tkiem procesu o numerze 0 jest tworzony
przez wykonanie przez inny proces funkcji&nbsp;<i>fork</i>. Proces j¹
wykonuj¹cy nazywa siê&nbsp;<b>procesem macierzystym</b>, zaœ nowoutworzony
-&nbsp;<b>procesem potomnym</b>. Procesy, podobnie jak katalogi, tworz¹
drzewiast¹ strukturê hierarchiczn¹ - ka¿dy proces w systemie ma jeden proces
macierzysty, lecz mo¿e mieæ wiele procesów potomnych. Korzeniem takiego drzewa
w systemie UNIX jest proces o PID równym 1, czyli&nbsp;<i>init</i>.</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Mechanizm
tworzenia procesu w systemach unixowych przedstawiono poni¿ej:</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:18.0pt;font-family:"inherit",serif;color:#373A3C'>Funkcje
systemowe</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'>Funkcje&nbsp;<i>fork</i>&nbsp;oraz&nbsp;<i>vfork</i></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><span style='font-size:10.0pt;font-family:Consolas;
color:#212529'>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style='font-size:
10.0pt;font-family:Consolas;color:red'>&nbsp;&nbsp;&nbsp; <b>pid_t fork( void )</b></span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>W
momencie jej wywo³ania tworzony jest nowy proces, bêd¹cy potomnym dla tego, w
którym w³aœnie zosta³a wywo³ana funkcja&nbsp;<i>fork</i>. Jest on kopi¹ procesu
macierzystego - otrzymuje duplikat obszaru danych, sterty i stosu (a wiêc nie
wspó³dzieli danych). Funkcja&nbsp;<i>fork</i>&nbsp;jest wywo³ywana raz, lecz
zwraca wartoœæ dwukrotnie - proces potomny otrzymuje wartoœæ 0, a proces
macierzysty PID nowego procesu. Jest to konieczne nie tylko ze wzglêdu na
mo¿liwoœæ rozró¿nienia procesów w kodzie programu: proces macierzysty musi
otrzymaæ PID nowego potomka, poniewa¿ nie istnieje ¿adna funkcja umo¿liwiaj¹ca
wylistowanie wszystkich procesów potomnych. W przypadku procesu potomnego nie
jest konieczne podawanie PID jego procesu macierzystego, poniewa¿ ten jest
okreœlony jednoznacznie (i mo¿na go wydobyæ np. za pomoc¹ funkcji getppid). Z
kolei 0 jest bezpieczn¹ wartoœci¹, poniewa¿ jest zarezerwowana dla procesu
demona wymiany i nie ma mo¿liwoœci utworzenia nowego procesu o takim PID.</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Po
wywo³aniu forka oba procesy (macierzysty i potomny) kontynuuj¹ swoje dzia³anie
(od linii nastêpnej po wywo³aniu forka czyli efektem kodu:</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><span style='font-size:10.0pt;font-family:Consolas;
color:red'>&nbsp; <b>#include &lt;stdio.h&gt;</b></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><b><span style='font-size:10.0pt;font-family:Consolas;
color:red'>&nbsp;&nbsp; main(){</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><b><span style='font-size:10.0pt;font-family:Consolas;
color:red'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
printf(&quot;Poczatek\n&quot;);</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><b><span style='font-size:10.0pt;font-family:Consolas;
color:red'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
fork();</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><b><span style='font-size:10.0pt;font-family:Consolas;
color:red'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
printf(&quot;Koniec\n&quot;);</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><b><span style='font-size:10.0pt;font-family:Consolas;
color:red'>}</span></b></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Bêdzie:</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><i><span style='font-size:10.0pt;font-family:Consolas;
color:#212529'>Poczatek&nbsp; //z macierzystego przed wywo³aniem forka </span></i></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><i><span style='font-size:10.0pt;font-family:Consolas;
color:#212529'>Koniec&nbsp; // z macierzystego lub potomnego po forku</span></i></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><i><span style='font-size:10.0pt;font-family:Consolas;
color:#212529'>Koniec&nbsp; //z macierzystego lub potmnego po forku</span></i></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Powy¿szy
komentarz&nbsp;<i>// z macierzystego lub potomnego po forku wynika z
faktu&nbsp;</i>¿e nie mo¿na przewidzieæ, który z procesów bêdzie wykonywaæ
swoje instrukcje jako pierwszy, dlatego w przypadku gdy wymaga siê od nich
wspó³pracy, nale¿y zastosowaæ jakieœ metody synchronizacji komunikacji
miêdzyprocesowej.</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>vfork</span></p>

<ul style='margin-top:0cm' type=disc>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
     style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;</span><b><span
     style='font-size:7.5pt;font-family:"inherit",serif;color:red'>pid_t vfork(
     void )&nbsp;</span></b></li>
</ul>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'>Funkcji tej
u¿ywa siê w przypadku gdy g³ównym zadaniem nowego procesu jest wywo³anie
funkcji&nbsp;</span><i><span style='font-size:7.5pt;font-family:"inherit",serif;
color:#373A3C'>exec</span></i><span style='font-size:7.5pt;font-family:"inherit",serif;
color:#373A3C'>.&nbsp;<i>vfork</i>&nbsp;„odblokuje” proces macierzysty dopiero
w momencie wywo³ania funkcji&nbsp;<i>exec</i>&nbsp;lub&nbsp;<i>exit</i>. Inn¹
wa¿n¹ cech¹ tej funkcji jest wspó³dzielenie przestrzeni adresowej przez obydwa
procesy.</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Identyfikacja
procesu macierzystego i potomnego</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>#include &lt;stdio.h&gt;</span><span
style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;#include
&lt;sys/types.h&gt;</span><span style='font-size:13.5pt;font-family:"inherit",serif;
color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;#include
&lt;unistd.h&gt;</span><span style='font-size:13.5pt;font-family:"inherit",serif;
color:#373A3C'><br>
<br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;int
main() {</span><span style='font-size:13.5pt;font-family:"inherit",serif;
color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pid_t
child_pid;</span><span style='font-size:13.5pt;font-family:"inherit",serif;
color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;PID
glownego programu: %d\n&quot;, (int)getpid());</span><span style='font-size:
13.5pt;font-family:"inherit",serif;color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child_pid
= fork();</span><span style='font-size:13.5pt;font-family:"inherit",serif;
color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(child_pid!=0)
{</span><span style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Proces
rodzica: Proces rodzica ma pid:%d\n&quot;, (int)getpid());</span><span
style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Proces
rodzica: Proces dziecka ma pid:%d\n&quot;, (int)child_pid);</span><span
style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {</span><span style='font-size:13.5pt;font-family:"inherit",serif;
color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Proces
dziecka: Proces rodzica ma pid:%d\n&quot;,(int)getppid());</span><span
style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Proces
dziecka: Proces dziecka ma pid:%d\n&quot;,(int)getpid());</span><span
style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><span
style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'><br>
<br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
0;</span><span style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;}</span><span
style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'><br>
<br>
Przyk³adowy wynik dzia³</span><span style='font-size:13.5pt;font-family:"Times New Roman",serif;
color:#373A3C'>&#130;</span><span style='font-size:13.5pt;font-family:"inherit",serif;
color:#373A3C'>ania programu:<br>
<br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;PID
glownego programu: 2359</span><span style='font-size:13.5pt;font-family:"inherit",serif;
color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;Proces
rodzica: Proces rodzica ma pid:2359</span><span style='font-size:13.5pt;
font-family:"inherit",serif;color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;Proces
rodzica: Proces dziecka ma pid:2360</span><span style='font-size:13.5pt;
font-family:"inherit",serif;color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;Proces
dziecka: Proces rodzica ma pid:2359</span><span style='font-size:13.5pt;
font-family:"inherit",serif;color:#373A3C'><br>
</span><span style='font-size:17.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;Proces
dziecka: Proces dziecka ma pid:2360</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'>Funkcje
rodziny&nbsp;<i>exec</i></span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Funkcje
z rodziny&nbsp;<i>exec s³u¿¹ do uruchomienia w ramach procesu innego programu</i>.</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>W
wyniku wywo³ania funkcji typu&nbsp;<b>exec&nbsp;</b>nastêpuje reinicjalizacja
segmentów kodu, danych i stosu procesu ale nie zmieniaj¹ siê takie atrybuty
procesu jak pid, ppid, tablica otwartych plików i kilka innych atrybutów z
segmentu danych systemowych</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>&nbsp;</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>int execl(char
     const *path, char const *arg0, ...)</span></b><b><span style='font-size:
     11.5pt;font-family:"Segoe UI",sans-serif;color:red'>&nbsp;</span></b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'><br>
     funkcja jako pierwszy argument przyjmuje œcie¿kê do pliku, nastêpne s¹
     argumenty wywo³ania funkcji, gdzie arg0 jest nazw¹ programu</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>int
     execle(char const *path, char const *arg0, ..., char const * const *envp)</span></b><b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>&nbsp;</span></b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'><br>
     podobnie jak execl, ale pozwala na podanie w ostatnim argumencie tablicy
     ze zmiennymi œrodowiskowymi</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>int
     execlp(char const *file, char const *arg0, ...)</span></b><b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>&nbsp;</span></b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'><br>
     równie¿ przyjmuje listê argumentów ale, nie podajemy tutaj œcie¿ki do
     pliku, lecz sam¹ jego nazwê, zmienna œrodowiskowa PATH zostanie
     przeszukana w celu zlokalizowania pliku</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>int execv(char
     const *path, char const * const * argv)</span></b><b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>&nbsp;</span></b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'><br>
     analogicznie do execl, ale argumenty podawane s¹ w tablicy</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>int
     execve(char const *path, char const * const *argv, char const * const
     *envp)</span></b><b><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
     color:red'>&nbsp;</span></b><span style='font-size:11.5pt;font-family:
     "Segoe UI",sans-serif'><br>
     analogicznie do execle, równie¿ argumenty przekazujemy tutaj w tablicy
     tablic znakowych</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
     style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>int
     execvp(char const *file, char const * const *argv)</span></b><b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>&nbsp;</span></b><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'><br>
     analogicznie do execlp, argumenty w tablicy</span></li>
</ul>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Ró¿nice
pomiêdzy wywo³aniami funkcji&nbsp;<b>exec&nbsp;</b>wynikaj¹ g³ównie z ró¿nego
sposobu budowy ich listy argumentów: w przypadku funkcji&nbsp;<b>execl&nbsp;</b>i&nbsp;<b>execlp&nbsp;</b>s¹
one podane w postaci listy, a w przypadku funkcji&nbsp;<b>execv&nbsp;</b>i&nbsp;<b>execvp&nbsp;</b>jako
tablica.&nbsp;</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Zarówno
lista argumentów, jak i tablica wskaŸników musi byæ zakoñczona wartoœci¹ NULL.
Funkcja&nbsp;<b>execle&nbsp;</b>dodatkowo ustala œrodowisko wykonywanego
procesu.</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Funkcje&nbsp;<b>execlp&nbsp;</b>oraz&nbsp;<b>execvp&nbsp;</b>szukaj¹
pliku wykonywalnego na podstawie œcie¿ki przeszukiwania podanej w zmiennej
œrodowiskowej PATH. Jeœli zmienna ta nie istnieje, przyjmowana jest domyœlna
œcie¿ka&nbsp;:/bin:/usr/bin.</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Wartoœci¹
zwrotn¹ funkcji typu&nbsp;<b>exec&nbsp;</b>jest&nbsp;<i>status</i>, przy czym
jest ona zwracana tylko wtedy, gdy funkcja</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>zakoñczy
siê niepoprawnie, bêdzie to zatem wartoœæ -1.</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>PRZYK£ADY</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><b><span style='font-size:10.0pt;font-family:Consolas;
color:red'>execl(„/bin/ls&quot;, „ls&quot;, „-l&quot;,null)</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><b><span style='font-size:10.0pt;font-family:Consolas;
color:red'>execlp(„ls&quot;, „ls&quot;, „-l&quot;,null)</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><b><span style='font-size:10.0pt;font-family:Consolas;
color:red'>char* const av[]={„ls&quot;, „-l&quot;, null}</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><b><span style='font-size:10.0pt;font-family:Consolas;
color:red'>execv(„/bin/ls&quot;, av)</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><b><span style='font-size:10.0pt;font-family:Consolas;
color:red'>char* const av[]={„ls&quot;, „-l&quot;, null}</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><b><span style='font-size:10.0pt;font-family:Consolas;
color:red'>execvp(„ls&quot;, av)</span></b></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Funkcje&nbsp;<i>exec</i>&nbsp;<b>nie
tworz¹ nowego procesu</b>, tak jak w przypadku funkcji&nbsp;<i>fork</i>. Nale¿y
pamiêtaæ, ¿e jeœli w programie wywo³amy funkcjê&nbsp;<i>exec</i>, to kod
znajduj¹cy siê dalej w programie nie zostanie wykonany, chyba ¿e wyst¹pi b³¹d.</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Przyk³ad
po³¹czenia funkcji fork i exec</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><b><span
style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>main.c:</span></b><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'><br>
<br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;#include
&lt;stdio.h&gt;</span></b><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
color:#373A3C'><br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;#include
&lt;sys/types.h&gt;</span></b><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
color:#373A3C'><br>
<br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;int
main() {</span></b><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
color:#373A3C'><br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pid_t
child_pid;</span></b><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
color:#373A3C'><br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child_pid
= fork();</span></b><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
color:#373A3C'><br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(child_pid!=0)
{</span></b><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
color:#373A3C'><br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Ten
napis zostal wyswietlony w programie 'main'!\n&quot;);</span></b><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'><br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
else {</span></b><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
color:#373A3C'><br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;execvp(&quot;./child&quot;,
NULL);</span></b><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
color:#373A3C'><br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></b><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'><br>
<br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
0;</span></b><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
color:#373A3C'><br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;}</span></b><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'><br>
<br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>child.c:</span></b><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'><br>
<br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;#include
&lt;stdio.h&gt;</span></b><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
color:#373A3C'><br>
<br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;int
main() {</span></b><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
color:#373A3C'><br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Ten
napis zostal wyswietlony przez program 'child'!\n&quot;);</span></b><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'><br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
0;</span></b><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
color:#373A3C'><br>
</span><b><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;}</span></b><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'><br>
<br>
Wynikiem dzia³ania programu jest:<br>
<br>
</span><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;Ten
napis zostal wyswietlony w programie 'main'!</span><span style='font-size:11.5pt;
font-family:"Segoe UI",sans-serif;color:#373A3C'><br>
</span><span style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>&nbsp;&nbsp;&nbsp;</span><span
lang=PL style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>Ten napis
zostal wyswietlony przez program 'child'!</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span lang=PL
style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'>Funkcje&nbsp;<i>wait</i>&nbsp;oraz&nbsp;<i>waitpid</i></span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span lang=PL
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Proces
macierzysty mo¿e siê dowiedzieæ o sposobie zakoñczenia bezpoœredniego potomka
przez wywo³anie funkcji systemowej&nbsp;<i>wait</i>. Jeœli wywo³anie
funkcji&nbsp;<i>wait</i>&nbsp;nast¹pi przed zakoñczeniem potomka, przodek
zostaje zawieszony w oczekiwaniu na to zakoñczenie. Je¿eli proces macierzysty
zakoñczy dzia³anie przed procesem potomnym, to proces potomny nazywany jest
sierot¹ (ang. orphant) i jest „adoptowany&quot; przez proces systemowy&nbsp;<i>init</i>,
który stajê siê w ten sposób jego przodkiem. Je¿eli proces potomny zakoñczy³
dzia³anie przed wywo³aniem funkcji&nbsp;<i>wait</i>&nbsp;w procesie
macierzystym, potomek pozostanie w stanie&nbsp;<i>zombi</i>. Zombi jest
procesem, który zwalnia wszystkie zasoby (nie zajmuje pamiêci, nie jest mu
przydzielany procesor), zajmuje jedynie miejsce w tablicy procesów w j¹drze
systemu operacyjnego i zwalnia je dopiero w momencie wywo³ania funkcji&nbsp;<i>wait</i>&nbsp;przez
proces macierzysty, lub w momencie zakoñczenia procesu macierzystego.</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span lang=PL
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Aby
pobraæ stan zakoñczenia procesu potomnego nale¿y u¿yæ jednej z dwóch funkcji
(plik nag³ówkowy&nbsp;</span><span lang=PL style='font-size:10.0pt;font-family:
Consolas;color:#E83E8C'>sys/wait.h</span><span lang=PL style='font-size:11.5pt;
font-family:"Segoe UI",sans-serif;color:#373A3C'>):</span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><span style='font-size:10.0pt;font-family:Consolas;
color:#212529'>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
style='font-size:10.0pt;font-family:Consolas;color:red'> pid_t wait ( int
*statloc )</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><span style='font-size:10.0pt;font-family:Consolas;
color:#212529'>·&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
style='font-size:10.0pt;font-family:Consolas;color:red'> pid_t waitpid( pid_t
pid, int *statloc, int options )</span></b></p>

<p class=MsoNormal style='line-height:normal;background:white'><span lang=PL
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Wywo³uj¹c&nbsp;<i>wait</i>&nbsp;lub&nbsp;<i>waitpid</i>&nbsp;proces
mo¿e:</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
     lang=PL style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>ulec
     zablokowaniu (jeœli wszystkie procesy potomne ci¹gle pracuj¹)</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
     lang=PL style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>natychmiast
     powróciæ ze stanem zakoñczenia potomka (jeœli potomek zakoñczy³ pracê i
     oczekuje na pobranie jego stanu zakoñczenia)</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
     lang=PL style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>natychmiast
     powróciæ z komunikatem awaryjnym (jeœli nie ma ¿adnych procesów potomnych)</span></li>
</ul>

<p class=MsoNormal style='line-height:normal;background:white'><span lang=PL
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Funkcja&nbsp;<i>wait</i>&nbsp;oczekuje
na zakoñczenie dowolnego potomka (do tego czasu blokuje proces macierzysty).
Funkcja&nbsp;<i>waitpid</i>&nbsp;jest bardziej elastyczna, posiada mo¿liwoœæ
okreœlenia konkretnego PID procesu, na który ma oczekiwaæ, a tak¿e dodatkowe
opcje (np. nieblokowanie procesu w sytuacji gdy ¿aden proces potomny siê nie
zakoñczy³). </span><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
color:#373A3C'>Argument pid nale¿y interpretowaæ w nastêpuj¹cy sposób:</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
     lang=PL style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>pid ==
     -1 Oczekiwanie na dowolny proces potomny. W tej sytuacji funkcja waitpid
     jest równowa¿na funkcji wait.</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
     lang=PL style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>pid
     &gt; 0 Oczekiwanie na proces o identyfikatorze równym pid.</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
     lang=PL style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>pid ==
     0 Oczekiwanie na ka¿dego potomka, którego identyfikator grupy procesów
     jest równy identyfikatorowi grupy procesów w procesie wywo³uj¹cym tê
     funkcjê.</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
     lang=PL style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>pid
     &lt; -1 Oczekiwanie na ka¿dego potomka, którego identyfikator grupy
     procesów jest równy wartoœci absolutnej argumentu pid.</span></li>
</ul>

<p class=MsoNormal style='line-height:normal;background:white'><span lang=PL
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>W
obydwu przypadkach statloc to wskaŸnik do miejsca w pamiêci, gdzie zostanie
przekazany status zakoñczenia procesu potomnego (mo¿na go zignorowaæ,
przekazuj¹c wartoœæ NULL).</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span lang=PL
style='font-size:18.0pt;font-family:"inherit",serif;color:#373A3C'>Koñczenie
procesów</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span lang=PL
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Istnieje
kilka mo¿liwych sposobów na zakoñczenie procesu:</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>zakoñczenie
     normalne</span></li>
 <ul type=circle>
  <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
      style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>wywo³anie
      instrukcji</span><b><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
      color:red'>&nbsp;<i>return</i>&nbsp;</span></b><span style='font-size:
      11.5pt;font-family:"Segoe UI",sans-serif'>w funkcji&nbsp;</span><span
      style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>main</span></li>
  <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
      style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>wywo³anie
      funkcji&nbsp;</span><b><i><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
      color:red'>exit</span></i></b><span style='font-size:11.5pt;font-family:
      "Segoe UI",sans-serif'>&nbsp;- biblioteka&nbsp;</span><span
      style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>stdlib</span></li>
  <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
      style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>wywo³anie
      funkcji&nbsp;</span><b><i><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
      color:red'>_exit</span></i></b><span style='font-size:11.5pt;font-family:
      "Segoe UI",sans-serif'>&nbsp;- biblioteka&nbsp;</span><span
      style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>unistd</span></li>
 </ul>
</ul>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>&nbsp;</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>zakoñczenie
     awaryjne</span></li>
 <ul type=circle>
  <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
      style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>wywo³anie
      funkcji&nbsp;</span><b><i><span style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;
      color:red'>abort</span></i></b><span style='font-size:11.5pt;font-family:
      "Segoe UI",sans-serif'>&nbsp;- generuje sygna³ SIGABORT</span></li>
  <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><b><span
      style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:red'>odebranie
      sygna³u</span></b></li>
 </ul>
</ul>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'>Funkcje&nbsp;<i>exit</i>&nbsp;i&nbsp;<i>_exit</i></span></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><b><span style='font-size:10.0pt;font-family:Consolas;
color:red'>&nbsp;&nbsp;&nbsp; void exit( int status )</span></b></p>

<p class=MsoNormal style='margin-bottom:0cm;margin-bottom:.0001pt;line-height:
normal;background:white'><b><span style='font-size:10.0pt;font-family:Consolas;
color:red'>&nbsp;&nbsp;&nbsp; void _exit( int status )</span></b></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Funkcja&nbsp;<i>_exit</i>&nbsp;natychmiast
koñczy dzia³anie programu i powoduje powrót do j¹dra systemu. Funkcja&nbsp;<i>exit</i>&nbsp;natomiast,
dokonuje pewnych operacji porz¹dkowych - koñczy dzia³anie procesu, który j¹
wykona³ i powoduje przekazanie w odpowiednie miejsce tablicy procesów
wartoœci&nbsp;<i>status</i>, która mo¿e zostaæ odebrana i zinterpretowana przez
proces macierzysty. Jeœli proces macierzysty zosta³ zakoñczony, a istniej¹
procesy potomne - to wykonanie ich nie jest zak³ócone, ale ich identyfikator
procesu macierzystego wszystkich procesów potomnych otrzyma wartoœæ 1 bêd¹c¹
identyfikatorem procesu&nbsp;<i>init</i>&nbsp;(proces potomny staje siê sierot¹
(ang. orphant) i jest „adoptowany&quot; przez proces systemowy&nbsp;<i>init</i>).
Funkcja&nbsp;<i>exit</i>&nbsp;zdefiniowana jest w pliku&nbsp;</span><span
style='font-size:10.0pt;font-family:Consolas;color:#E83E8C'>stdlib.h</span><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>.</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:13.5pt;font-family:"inherit",serif;color:#373A3C'>Polecenie
kill</span></p>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Polecenie
kill przesy³a sygna³ do wskazanego procesu w systemie. Standardowo wywo³anie
programu powoduje wysy³anie sygna³u nakazuj¹cego procesowi zakoñczenie pracy.
Proces zapisuje wtedy swoje wewnêtrzne dane i koñczy pracê. Kill mo¿e przesy³aæ
procesom ró¿nego rodzaju sygna³y. S¹ to na przyk³ad:</span></p>

<ul type=disc>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>SIGTERM –
     programowe zamkniêcie procesu (15, domyœlny sygna³)</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>SIGKILL –
     unicestwienie procesu, powoduje utratê wszystkich zawartych w nm danych
     (9)</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>SIGSTOP –
     zatrzymanie procesu bez utraty danych</span></li>
 <li class=MsoNormal style='color:#373A3C;line-height:normal;background:white'><span
     style='font-size:11.5pt;font-family:"Segoe UI",sans-serif'>SIGCONT –
     wznowienie zatrzymanego procesu</span></li>
</ul>

<p class=MsoNormal style='line-height:normal;background:white'><span
style='font-size:11.5pt;font-family:"Segoe UI",sans-serif;color:#373A3C'>Czasami
mo¿e zdarzyæ siê sytuacja, i¿ proces nie chce siê zamkn¹æ sygna³em SIGTERM, bo
jest przez coœ blokowany. Wtedy definitywnie mo¿emy go unicestwiæ sygna³em
SIGKILL, lecz spowoduje to utratê danych wewnêtrznych procesu.</span></p>

<p class=MsoNormal><span lang=PL>&nbsp;</span></p>

</div>

</body>

</html>
